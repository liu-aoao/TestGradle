apply plugin: 'java'
apply plugin: 'application'

ext.projectIds = ['group': 'com.aoao.TestGradle', 'version': '0.1.0']
group = projectIds.group
version = projectIds.version

mainClassName = "com.aoao.TestGradle.module3.Run"

buildscript {
    if (System.getenv('CIRCLECI')) {
        ext.artifactoryUsername = System.getenv('ARTIFACTORY_USERNAME')
        ext.artifactoryPassword = System.getenv('ARTIFACTORY_PASSWORD')
    }
}

allprojects { module ->

    apply plugin: 'java'

    module.repositories {
        mavenCentral()
    }

    module.group = projectIds.group
    module.version = projectIds.version

//    task checkJarExists << {
//        print "Looking for existing JAR file... "
//        def targetFilePath = module.projectDir.toString() + "/build/libs/" + module.name + "-" + module.version + ".jar"
//        print targetFilePath
//        println " ... File exists: " + file(targetFilePath).exists().toString()
//
//        if (file(targetFilePath).exists()) {
//            ant.checksum(file: file(targetFilePath))
//            println file(targetFilePath + ".MD5").text
//            delete(file(targetFilePath + ".MD5"))
//        }
//    }

//    module.repositories {
//        maven {
//            url "https://snapchat.artifactoryonline.com/snapchat/plugins"
//            credentials {
//                if (System.getenv('CIRCLECI')) {
//                    username = artifactoryUsername
//                    password = artifactoryPassword
//                    println "I'm here, username = $username, password = $password"
//                }
//                else {
//                    username = "Yunao.Liu"
//                    password = "Snapchat1"
//                    println "I'm here, username = $username, password = $password"
//                }
//            }
//        }
//    }
}

project(':module1') {
    dependencies {
        compile "com.google.guava:guava:17.0"
    }
}

project(':module2') {
    dependencies {
        compile project(':module1')
    }
}

project(':module3') {
    dependencies {
        compile project(':module1')
        compile project(':module2')
    }
}

subprojects { module ->

    task annouceBuilt << {
        print "Project is built, the result is: "
        if (module.assemble.state.getFailure() != null) {
            println "FAILURE!"
        } else {
            println "SUCCESS!"
        }

        if (module.assemble.state.getSkipMessage() == "UP-TO-DATE") {
            println "Task is already up-to-date"
        } else {
            println "This is a new built"
        }
    }

    task annouceTest << {
        print "Task test is executed, the result is: "
        if (module.test.state.failure == null) {
            println "SUCCESS!"
        } else {
            println "FAILURE!"
        }
    }

    task printTaskIO(type: PrintIO) << {
        println "For module: $module.name"
        printInput(module.compileJava)
        printOutput(module.compileJava)
        printInput(module.jar)
        printOutput(module.jar)
        printInput(module.compileTestJava)
        printOutput(module.compileTestJava)
        println "========================================================"
    }

    module.compileJava.finalizedBy(":$module.name:printTaskIO")
    module.assemble.finalizedBy(":$module.name:annouceBuilt")
    module.annouceBuilt.mustRunAfter(":$module.name:compileTestJava")
    module.test.finalizedBy(":$module.name:annouceTest")
    module.annouceTest.mustRunAfter(":$module.name:test")

}


task resolveAllDependencies() << {
    subprojects {
        it.dependencies()
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task myTaks(type: PrintIO) {
    printInput(compileJava)
    printOutput(compileJava)
}

class PrintIO extends DefaultTask {

    def printNameAndHash(f) {
        if(f.isFile()) {
            print "\t$f\t"
            ant.checksum(file: f)
            def ff5 = new File("$f" + ".MD5")
            def reader = new BufferedReader(new FileReader(ff5))
            def md5 = reader.readLine()
            println md5
            reader.close()
            ff5.delete()
        }
    }

    def printInput(Task t) {
        println "Task Inputs of $t.name: "
        t.inputs.getFiles().each {
            if(it.isDirectory()) {
                it.eachFileRecurse() { file ->
                    if(file.isFile()) {
                        printNameAndHash(file)
                    }
                }
            } else {
                printNameAndHash(it)
            }
        }
    }

    def printOutput(Task t) {
        println "Task Outputs of $t.name: "
        t.outputs.getFiles().each {
            if(it.isDirectory()) {
                it.eachFileRecurse() { file ->
                    if(file.isFile()) {
                        printNameAndHash(file)
                    }
                }
            } else {
                printNameAndHash(it)
            }
        }
    }
}



